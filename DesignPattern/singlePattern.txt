/*
[SINGLE PATTERN]
In some cases like log, thread pool, etc. we only need one actual object of class.
So we need assure only one object is initialize of this object.
*/

public class Singleton {
    private static Singleton uniqueInstance;

    public static Singleton getInstance() {
        // only way to get instance if this class
        if (uniqueInstance == null) {
            uniqueInstance = new Singleton();
        }
        return uniqueInstance;
    }

    private Singleton() {
        // construct function
    }
}

/*
multi-thread
two threads use getInstance at the same time
*/
public class Singleton {
    public static synchronized Singleton getInstance() {
        // only way to get instance if this class
        if (uniqueInstance == null) {
            uniqueInstance = new Singleton();
        }
        return uniqueInstance;
    }
}


/*
problem of synchronized getInstance()
add burden when get this single instance
*/

// [Solution 1] create instance when JVM start
public class Singleton {
    private static Singleton uniqueInstance = new Singleton();

    private Singleton() {}

    public static Singleton getInstance() {
        return uniqueInstance;
    }
}

// [Solution 2] double lock, avoid synchronized in getInstance()
public class Singleton {
    private volatile static Singleton uniqueInstance;

    private Singleton() {}

    public static Singleton getInstance() {
        // If don't exist, use synchronized
        synchronized (Singleton.class) {
            if (uniqueInstance == null) {
                uniqueInstance = new Singleton();
            }
        }
        return uniqueInstance;
    }
}